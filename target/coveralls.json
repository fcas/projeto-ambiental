{"repo_token":"ZMaem37nGetMypipysukRJVsMVjlG4WDs","environment":{},"git":{"head":{"id":"eb64b06943d54eb93dc8d4064fe63a5acb04ea0d","message":"project.build.sourceEncoding in pom.xml\n","author_name":"fcas","author_email":"f3l1nux@gmail.com","committer_name":"fcas","committer_email":"f3l1nux@gmail.com"},"branch":"master","remotes":[{"name":"heroku","url":"git@heroku.com:projeto-ambiental-hub.git"},{"name":"github","url":"git@github.com:fcas/projeto-ambiental.git"}]},"source_files":[{"source":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.hub.model;\n\nimport javax.xml.bind.annotation.XmlRootElement;\n\n/**\n *\n * @author jorge\n */\n@XmlRootElement\npublic class SubscribeBean {\n\n    private String address;\n    private String topic;\n    private int port;\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getTopic() {\n        return topic;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public void setPort(int port) {\n        this.port = port;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null,null,0,null,null,null,0,0,null],"name":"br/hub/model/SubscribeBean.java"},{"source":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage br.hub.resource;\n\nimport java.util.LinkedList;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport javax.annotation.Resource;\nimport javax.ws.rs.PUT;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.PathParam;\n\nimport br.hub.model.SubscribeBean;\nimport javax.ws.rs.Consumes;\n\nimport org.push.java.processors.NotifySubscribes;\n\n\n/**\n * REST Web Service\n *\n * @author jorge\n */\n@Path(\"hub\")\npublic class HubResource {\n\n    /**\n     * Creates a new instance of HubResource\n     */\n    public HubResource() {\n    }\n\n    @Resource(name = \"subscriberQueue\")\n    private static final BlockingQueue<SubscribeBean> subscriberQueue = new LinkedBlockingQueue<SubscribeBean>();\n\n    private static final LinkedList<String> topics = new LinkedList<String>();\n    \n\n   \n    \n    @PUT\n    @Path(\"publish/{idTopic}\")\n    public void publicar(@PathParam(\"idTopic\") String idTopic, String valueTopic) {\n\n        System.out.println(\"publicando feed \"+valueTopic);\n        \n        if(topics.contains(idTopic)){\n        \tnew NotifySubscribes(subscriberQueue.iterator(), valueTopic, idTopic).notificar();\n        }\n        \n    }\n\n    @PUT\n    @Path(\"register\")\n    public void registrar(String idTopic){\n    \tSystem.out.println(\"Registrando topico\");\n    \tif(!topics.contains(idTopic)){\n    \t\ttopics.add(idTopic);\n    \t}else{\n    \t\tSystem.out.println(\"Topico com esse id jah foi cadastrado\");\n    \t}\n    \tSystem.out.println(\"Topico: \" + idTopic + \"cadastrado\");\n    }\n   \n    \n    @PUT\n    @Path(\"subscribe\")\n    public void subscribe(SubscribeBean subscribe) throws InterruptedException {\n        System.out.println(\"Received subscribe request\");\n        System.out.println(\"topico \" + subscribe.getTopic());\n\n        if(topics.contains(subscribe.getTopic())){\n        \tsubscriberQueue.add(subscribe);\n        }else{\n            System.out.println(\"topico nao existe\");\n        }\n        \n        System.out.println(subscriberQueue.size() + \" Subescritos\");\n\n    }\n\n    @POST\n    @Path(\"/unsubscribe\")\n    @Consumes(\"application/xml\")\n    public void unsubscribe(SubscribeBean subscribe) {\n        System.out.println(subscriberQueue.size() + \" Subescritos\");\n\n        int size = subscriberQueue.size();\n\n        LinkedBlockingQueue<SubscribeBean> auxiliar = new LinkedBlockingQueue<SubscribeBean>();\n\n\n        try {\n           \n            for (int a = 0; a < size; a++) {\n                SubscribeBean subscriberAux = subscriberQueue.take();\n                auxiliar.add(subscriberAux);\n            }\n\n\n            for (int a = 0; a < size; a++) {\n                SubscribeBean subscriberAux = auxiliar.take();\n\n                if (!(subscriberAux.getTopic().equals(subscribe.getTopic())) ||\n                        !(subscriberAux.getAddress().equals(subscribe.getAddress()))\n                        || subscriberAux.getPort() != subscribe.getPort()) {\n                    \n                    subscriberQueue.add(subscriberAux);\n                    \n                }\n            }\n\n\n        } catch (InterruptedException e) {\n            System.out.println(\"erro\");\n        }\n\n        System.out.println(subscriberQueue.size() + \" Subescritos\");\n\n    }\n\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,0,null,null,null,null,null,null,null,null,0,null,0,0,null,null,0,null,null,null,null,0,0,0,null,0,null,0,0,null,null,null,null,null,0,0,null,0,0,null,0,null,null,0,null,0,null,null,null,null,null,0,null,0,null,0,null,null,null,null,0,0,0,null,null,null,0,0,null,0,null,null,null,0,null,null,null,null,null,0,0,0,null,0,null,0,null,null],"name":"br/hub/resource/HubResource.java"},{"source":"package org.push.java.processors;\n\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.util.Iterator;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport br.hub.model.SubscribeBean;\n\npublic class NotifySubscribes {\n\n    private Iterator<SubscribeBean> subscribes;\n    private String notificacao;\n    private String topic;\n\n    public NotifySubscribes(Iterator<SubscribeBean> subscribes, String notificacao, String topic) {\n        this.subscribes = subscribes;\n        this.notificacao = notificacao;\n        this.topic = topic;\n    }\n\n    public void notificar() {\n\n\n        while (subscribes.hasNext()) {\n\n\n            SubscribeBean subscribe = subscribes.next();\n\n            if (subscribe.getTopic().equals(topic)) {\n                try {\n                    Socket socket = new Socket(subscribe.getAddress(), subscribe.getPort());\n                    ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n\n                    System.out.println(\"notificando \" + subscribe.getAddress() + \":\" + subscribe.getPort());\n                    output.writeObject(notificacao);\n\n                } catch (UnknownHostException ex) {\n                    Logger.getLogger(NotifySubscribes.class.getName()).log(Level.SEVERE, null, ex);\n                } catch (IOException ex) {\n                    Logger.getLogger(NotifySubscribes.class.getName()).log(Level.SEVERE, null, ex);\n                }\n\n\n            }\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,0,null,null,0,null,0,null,0,0,null,0,0,null,0,0,0,0,0,null,null,null,0,0,null],"name":"org/push/java/processors/NotifySubscribes.java"}]}